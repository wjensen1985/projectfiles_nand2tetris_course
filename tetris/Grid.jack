/** Grid class for grid of Game tiles. */
class Grid {
    field int rows;
    field int cols;
    field int hiddenRows; // how many of the rows (top down) are hidden
    /* 
    other fields:
     - list of tiles cols x (rows + hiddenRows)
     -- need method/function to help draw these tiles/board to screen
     - isOverflow?  tells whether grid is overflowing?

    methods:
     - draw
     - canClearRow
     -- check what row(s) can be cleared
     - clearRow
     -- clears a given row
    */

    // draws current grid state on to the screen
    method void draw(boolean color){
        // 20 + 1 rows, 10 + 2 cols, space (2px), size (10px)
        var int box_size;
        var int space_size;
        var int horizontal_offset;
        var int x1, x2, y1, y2, r, c;
        let box_size = 10;
        let space_size = 2;
        let horizontal_offset = (512 / 2) - ((box_size * cols) + (space_size * (cols - 1) ) );

        do Screen.setColor(color);
        // loop col + 2 times
        //      loop row + 1 times
        //          draw rectangle; x1: horizontal_offset + col * (box + space)
        //                          y1: row * 12
        //                          x2: x1 + 12
        //                          y2: y1 + 12

/*
        let x1 = horizontal_offset + ((0) * (box_size + space_size));
        let y1 = r * (box_size = space_size);
        let x2 = x1 + (box_size = space_size);
        let y2 = y1 + (box_size = space_size);
        do Screen.drawRectangle(x1, y1, x2, y2);
*/
        
        let c = 0;
        while (c < (cols + 2)){
            let r = 0;
            while (r < (rows + 1)){
                let x1 = horizontal_offset + ((c) * (box_size + space_size));
                let y1 = r * (box_size + space_size);
                let x2 = x1 + (box_size);
                let y2 = y1 + (box_size);

                do Screen.drawRectangle(x1, y1, x2, y2);

                let r = r + 1;
            }
            let c = c + 1;
        }

        return;
    }

    // checks what row(s) in the grid can be cleared
/*
    method int canClearRows(){

        return;
    }

    // clears a given row
    method void clearRow(){

        return;
    }
*/

    constructor Grid new(int initRows, int initCols){
        let rows = initRows;
        let cols = initCols;
        let hiddenRows = 2;
        
        return this;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }

}