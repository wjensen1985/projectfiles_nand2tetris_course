/** Tetris Game class */
class TetrisGame { 
    field int score;
    field int level;
    field Grid grid;
    field Piece currentPiece;
    field int grid_start_px;
    field int prevFrameTime;
    field int time;
    field int updateTicks;
    field int prevKey;
    field int prevKeyTime;
    field int kbdTicks;

    field Array prevPieceCells; // len 12  (r, c, val) * 4
    field boolean firstFrame;
    field int gravityFrames;
    field int gravityCounter;

    field int dasFrames;
    field int arrFrames;
    field int lrHold;
    field int dasCounter;
    field int arrCounter;

    field int lockDelayFrames;
    field int lockCounter;
    field boolean onGround;
    field int softDropFrames;
    field int softDropCounter;

    field int nextType;

    constructor TetrisGame new(int initScore, int initLevel){
        let score = initScore;
        let level = initLevel;
        let grid = Grid.new(20, 10);
        let time = 0;
        let prevFrameTime = 0;
        let updateTicks = 200;
        let prevKey = 0;
        let prevKeyTime = 0;
        let kbdTicks = 500;


        let gravityFrames = 100;
        let gravityCounter = 0;
        let firstFrame = true;

        let dasFrames = 30;
        let arrFrames = 5;
        let lrHold = 0;
        let dasCounter = 0;
        let arrCounter = 0;

        let lockDelayFrames = 30;
        let lockCounter = 0;
        let onGround = false;

        let softDropFrames = 30;
        let softDropCounter = 0;

        let prevPieceCells = Array.new(12);

        let currentPiece = Piece.new(3, 1, 4);
        let nextType = 0;

        return this;
    }

    method void setup(){
        var int ref_px;

        let ref_px = grid.getHorizontalOffset();

        do grid.draw();
        do draw_statics(true, ref_px);

        return;
    }

    method int get_score(){
        return score;
    }

    method int get_level(){
        return level;
    }

    method void draw(int timeDiff){
        var Array pieceGridPts;
        var int i, lenPts;

        // draw 'locked' points if Frame is > updateTicks past prevFrame
        // let timeDiff = time - prevFrameTime;
        // if (timeDiff > (updateTicks-2)){
        //     do grid.draw();
        // }

        if (timeDiff = 0){
            do grid.draw();        
            // draw in the current Pieces 'active' points
            let pieceGridPts = currentPiece.calcGridCoords();
            // (r, c, val) for each block in piece (4blocks in every piece)
            let lenPts = 12;

            let i = 0;
            while (i < lenPts){
                if (pieceGridPts[i+2] = 1){
                    // draw point in grid
                    do grid.drawOverPoint(pieceGridPts[i], pieceGridPts[i+1], true);
                } 
                // else {
                //     if( (grid.getPoint(pieceGridPts[i], pieceGridPts[i+1])) = 1){
                //         do grid.drawOverPoint(pieceGridPts[i], pieceGridPts[i+1], true);
                //     }
                // }

                let i = i + 3;
            } 
            do pieceGridPts.dispose();
        }


        
        return;
    }

    method boolean play(){
        var Array piece_grid_coords;
        var int timeDiff, i, j, found, cleared;
        var boolean canMoveFlag2, arrFlag, canPlay, rotHoldFlag;

        while (true){
            // read & handle input
            do handleKeyPress();

            // apply gravity
            let gravityCounter = gravityCounter + 1;
            if (gravityCounter > (gravityFrames-1)){
                let canMoveFlag2 = currentPiece.canMove(grid, 0, 1);
                if (canMoveFlag2){
                    do currentPiece.tryMove(grid, 0, 1);
                    let onGround = false;
                    // let lockCounter = 0;
                } else {
                    if (~(onGround)){
                        let lockCounter = 0;
                    }
                    let onGround = true;
                }
                let gravityCounter = 0;
            }

            // locking
            if (onGround){
                let lockCounter = lockCounter + 1;
                if (lockCounter > (lockDelayFrames-1)){
                    // stamp to board
                    do lockCurrentPiece();
                    
                    // clear lines
                    let cleared = grid.clearFullLines();
                    do grid.draw();

                    // spawn next active piece
                    do spawnNewPiece();

                    // reset lock state
                    let lockCounter = 0;
                    let onGround = false;
                }
            } else {
                let lockCounter = 0;
            }

            // allocate this frames piece render info
            let piece_grid_coords = currentPiece.calcGridCoords();

            // render active piece (only changes vs. previous frame)
            if (firstFrame){
                do grid.draw();
                let i = 0;
                while (i < 12){
                    if (piece_grid_coords[i+2] = 1){
                        do drawCell(piece_grid_coords[i], piece_grid_coords[i+1]);
                    }
                    let i = i + 3;
                }

                do seedPrevPieceCells(piece_grid_coords);
                let firstFrame = false;
            }

            // erase old loop
            let i = 0;
            while (i < 12){
                if (prevPieceCells[i+2] = 1){
                    let found = 0;
                    let j = 0;
                    while (j < 12){
                        if ( (piece_grid_coords[j+2] = 1) & (sameCell(prevPieceCells[i], prevPieceCells[i+1], piece_grid_coords[j], piece_grid_coords[j+1]) ) ){
                            let found = 1;
                            let j = 12;
                        } else {
                            let j = j + 3;
                        }
                    }

                    if (found = 0){
                        do eraseCell(prevPieceCells[i], prevPieceCells[i+1]);
                    }

                }
                let i = i + 3;
            }

            // draw new loop
            let i = 0;
            while (i < 12){
                if (piece_grid_coords[i+2] = 1){
                    let found = 0;
                    let j = 0;
                    while (j < 12){
                        if ( (piece_grid_coords[j+2] = 1) & (sameCell(prevPieceCells[j], prevPieceCells[j+1], piece_grid_coords[i], piece_grid_coords[i+1]) ) ){
                            let found = 1;
                            let j = 12;
                        } else {
                            let j = j + 3;
                        }
                    }

                    if (found = 0){
                        do drawCell(piece_grid_coords[i], piece_grid_coords[i+1]);
                    }

                }
                let i = i + 3;
            }
            
            // update prevPieceCells = pieces_grid_coords (curent)
            let i = 0;
            while (i < 12){
                let prevPieceCells[i] = piece_grid_coords[i];
                let prevPieceCells[i+1] = piece_grid_coords[i+1];
                let prevPieceCells[i+2] = piece_grid_coords[i+2];
                let i = i + 3;
            }
            do piece_grid_coords.dispose();

            // update timers/counters - gravity, lock, input repeat, etc.
            if (lrHold = 0){
                let dasCounter = 0;
                let arrCounter = 0;
            } else {
                if (dasCounter < dasFrames){
                    let dasCounter = dasCounter + 1;
                } else{
                    let arrCounter = arrCounter + 1;
                    if (arrCounter > (arrFrames - 1)){
                        // repeat move right
                        if (lrHold = 1){
                            // do canMove = flag
                            let arrFlag = currentPiece.canMove(grid, 1, 0);
                            if (arrFlag){
                                do currentPiece.tryMove(grid, 1, 0);
                                do maybeResetlockAfterAction();
                            }
                        }

                        // repeat move left
                        if (lrHold = -1){
                            let arrFlag = currentPiece.canMove(grid, -1, 0);
                            if (arrFlag){
                                do currentPiece.tryMove(grid, -1, 0);
                                do maybeResetlockAfterAction();
                            }
                        }

                        // restart ARR window
                        let arrCounter = 0;
                    }
                }
            }

            if (~(onGround)){
                let lockCounter = 0;
            }

            if (gravityCounter < 0){
                let gravityCounter = 0;
            }
            if (gravityCounter > gravityFrames){
                let gravityCounter = 0;
            }

            if (dasCounter < 0){
                let dasCounter = 0;
            }
            if (arrCounter < 0){
                let arrCounter = 0;
            }

        }

        return false;
    }

    method void handleKeyPress(){
        var int curKey;
        var boolean canMoveFlag;

        let curKey = Keyboard.keyPressed();

        // edge actions -> once per press - hard drop, rotates
        if ( (~(curKey = 0)) & (~(curKey = prevKey)) ) {
            // space => hard drop
            if (curKey = 32){
                do currentPiece.hardDrop(grid);
                let onGround = true;
                let lockCounter = lockDelayFrames;
            }

            // x or up arrow => rotateCW
            if ((curKey = 131) | (curKey = 120)){
                if ( ~((currentPiece.getType()) = 1) ){
                    if (currentPiece.tryRotateCW(grid)){
                        do maybeResetlockAfterAction();
                    }
                    
                }
            }

            // z => rotateCCW
            if ((curKey = 122)){
                if ( ~((currentPiece.getType()) = 1) ){
                    if (currentPiece.tryRotateCCW(grid)){
                        do maybeResetlockAfterAction();
                    }
                }
            }

        }

        
        // lateral hold -- dealyed auto shift/auto repeat rate (DAS/ARR)
        // right arrow => move piece right 1
        if ((curKey = 132) | (curKey = 130)){
            if (curKey = 132){
                if (~(lrHold = 1)){
                    let lrHold = 1;
                    let dasCounter = 0;
                    let arrCounter = 0;
                    if(currentPiece.canMove(grid, 1, 0)){
                        do currentPiece.tryMove(grid, 1, 0);
                        do maybeResetlockAfterAction();
                    }
                }
            }
            // left arrow => move piece left 1
            if (curKey = 130){
                if (~(lrHold = -1)){
                    let lrHold = -1;
                    let dasCounter = 0;
                    let arrCounter = 0;
                    if (currentPiece.tryMove(grid, -1, 0)){
                        do currentPiece.tryMove(grid, -1, 0);
                        do maybeResetlockAfterAction();
                    }                
                }
            }
        } else {
            let lrHold = 0;
        }

        // if holding left/right, count DAS then ARR repeats
        // if (~(lrHold = 0)) {
        //     let dasCounter = dasCounter + 1;
        //     if (arrCounter > (arrFrames-1)) {
        //         if (lrHold = 1){
        //             do currentPiece.tryMove(grid, 1, 0);
        //         }
        //         if (lrHold = -1){
        //             do currentPiece.tryMove(grid, -1, 0);
        //         }
        //         let arrCounter = 0;
        //         let lockCounter = 0;
        //     }
        // }

        // soft drop (held down)
        // down arrow => move piece down 1 (soft drop)
        if (curKey = 133){
            let softDropCounter = softDropCounter + 1;
            if (softDropCounter > (softDropFrames -1)){
                let canMoveFlag = currentPiece.canMove(grid, 0, 1);
                if (canMoveFlag){
                    do currentPiece.tryMove(grid, 0, 1);
                    let onGround = false;
                    let lockCounter = 0;
                } else {
                    let onGround = true;
                }
                let softDropCounter = 0;
            }
        } else {
            let softDropCounter = 0;
        }
        

        let prevKey = curKey;
        return;
    }

    method void draw_statics(boolean color, int ref_px){
        var int grid_start_px;
        var int grid_size_px; // includes extra 2px for rightmost border
        var int box_size, space_size;
        var int columns;
        var int rows;
        var int i, x1, x2, y1, y2;

        let box_size = 10;
        let space_size = 2;

        let rows = 21;
        let columns = 12;

        let grid_start_px = ref_px;
        let grid_size_px = 12 * 10;

        do Screen.setColor(color);
        // draw border columns on left and right of grid
        let i = 0;
        while (i < rows){
            // draw left border column:
            let x1 = ref_px - (box_size + space_size);
            let y1 = i * (box_size + space_size);
            let x2 = x1 + (box_size);
            let y2 = y1 + (box_size);

            do Screen.drawRectangle(x1, y1, x2, y2);

            // draw right border column:
            let x1 = ref_px + grid_size_px;
            let x2 = x1 + (box_size);

            do Screen.drawRectangle(x1, y1, x2, y2);

            let i = i + 1;
        }

        // draw border row on bottom of grid
        let i = 0;
        // y's are already set to correct row height/offset
        while (i < 10){
            let x1 = ref_px + ( i * (box_size + space_size));
            let x2 = x1 + (box_size);

            do Screen.drawRectangle(x1, y1, x2, y2);

            let i = i + 1;
        }


        return;
    }

    method void seedPrevPieceCells(Array src){
        var int i;
        let i = 0;

        while (i < 12){
            let prevPieceCells[i] = src[i];
            let prevPieceCells[i+1] = src[i+1];
            let prevPieceCells[i+2] = src[i+2];
            let i = i + 3;
        }

        return;
    }

    method void eraseCell(int r, int c) {
        var int v;
        // draw background color just for this cell
        let v = grid.getPoint(r, c);
        do grid.drawOverPoint(r, c, (v=1));
        return;
    }

    method void drawCell(int r, int c) {
        do grid.drawOverPoint(r, c, true);
        return;
    }

    method void lockCurrentPiece() {
        var Array cells;
        let cells = currentPiece.calcGridCoords();
        do grid.stampCells(cells);
        do cells.dispose();
        return;
    }

    method boolean sameCell(int aR, int aC, int bR, int bC) {
        var boolean ret;
        let ret = ((aR = bR) & (aC = bC)); 
        return ret;
    }

    method boolean isGrounded() {
        return (~(currentPiece.canMove(grid, 0, 1)));
    }

    method void maybeResetlockAfterAction(){
        if (~(isGrounded())) {
            let onGround = false;
            let lockCounter = 0;
        }
        return;
    }

    method void spawnNewPiece() {
        var int t, spawnRow, spawnCol;
        
        // choose next piece type
        let t = nextType;
        if (nextType = 6){
            let nextType = 0;
        } else {
            let nextType = nextType + 1;
        }

        // spawn coords - center-ish
        let spawnRow = 1;
        let spawnCol = 4;

        do currentPiece.dispose();
        let currentPiece = Piece.new(t, spawnRow, spawnCol);

        if (~(currentPiece.canMove(grid, 0, 0))) {
            // game over
            do Sys.wait(1000);
        }

        // reset movement/lock timers
        let onGround = false;
        let lockCounter = 0;
        let lrHold = 0;
        let dasCounter = 0;
        let arrCounter = 0;

        return;
    }

    method void dispose(){
        do prevPieceCells.dispose();
        do grid.dispose();
        do currentPiece.dispose();
        do Memory.deAlloc(this);
        return;
    }
}